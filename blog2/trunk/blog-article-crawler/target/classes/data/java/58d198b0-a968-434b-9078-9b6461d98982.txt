同事 疯狂 的 类 构造 器 我 要 疯了 builder 模式 都不会 么 同事 疯狂 的 类 构造 器 我 要 疯了 builder 模式 都不会 么 疯狂 的 类 构造 器 基本 set 方法 改良 builder 模式 改良 lombok 实现 builder 模式 java 实现 builder 模式 springboot 中 的 builder 模式 总结 实战 演练 疯狂 的 类 构造 器 最 近在 重构 项目 代码 的 时候 发现 同事 一段 创建 对象 的 方法 tasktasknewtask 紧急任务 处理 一下 这个 任务 刘 主管 客服 客服 客服 客服 truenewdate newdate newdate newdate newdate 需要 尽快 完成 真实 代码 敏感性 上面 的 代码 仅为 模仿 实际 要比 这个 更长 更 复杂 当我 看到 那段 代码 时 我 简直 要 疯了 拖了 半 天才 看完 到处 充满着 魔法值 不说 把 一个 类 所有 参数 都 放在 一个 构造 器 里面 这个 构造 器 也 太 疯狂 了 这种 写法 也 实在太 low 了 在 实际 开发 过程 中经 常看到 同事 们 这样 的 写法 比上 面的 更长 的 构造 器 你 见过 没我 反正 见过 一方面 也许 他们 真不知道 怎么 写 才 更好 毕竟 经验 有限 这个 可以 原谅 但 另一方面 也许 他们 就是 为了 偷懒 或者 为了 赶时间 反正 这都是 对 自己 和 同事 不 负责 的 表现 如果 你 在 公司 看到 同事 写 这样 的 优秀 代码 请把 这篇 文章 发给 他 看看 大量 参数 构造 器 的 缺点 参数 过多 时 代码 太长 极不 优雅 维护 极难 不能 判断 出 哪些 是 必须 参数 哪些 是 可选 参数 可选 参数 也 得 给 个 默认值 分不清 变量值 对应 哪个 变量 如 顺序 对应 错 很 容易 造成 错误 构造 器 参数 增减 时会 影响 所有 创建 该 对象 的 地方 影响 扩展性 构造 器 正确 的 用法 是 只 给出 几个 必选 重要 参数 的 构造 器 而 不是 把 所有 参数 放在 一个 构造 器 中比 如 我们 看下 jdk 线程 池 的 构造 器用 法 线程 池 就把 几个 重要 的 参数 封装 成了 几个 构造 器 这样 用户 就可以 根据 实际需要 调用 具体 的 某个 构造 器 基本 set 方法 改良 再回到 同事 写 的 那个 代码 写出 那样 长 的 构造 器 我 真的 服了 最基本 也 得 写成 这样 吧 tasktasknewtask tasksetid tasksetname 紧急任务 tasksetcontent 处理 一下 这个 任务 tasksetparentid tasksettype tasksetlevel 刘 主管 tasksetassignto tasksetassignto 客服 客服 客服 客服 taskissendemail true newdate newdate tasksetendtime newdate newdate newdate tasksetstatus tasksetmemo 需要 尽快 完成 这个 创建 对象 的 方式 是 最 普通 不 过了 也是 用 的 最多 的 了 这种 写法 虽然 看起来 很 直观 但是有 以下 几个 缺点 参数 多 的 情况下 setter 非常 多 代码 非常 长 不是 很 优雅 不能 判断 出 哪些 是 必须 参数 哪些 是 可选 参数 容易 漏掉 一些 参数 并且 很难 检查 出来 容易 搞错 对 象名 造成 潜在 错误 很难 排查 如同 时有 user 和 user 在 user 赋值 过程中 错误 的 复制 了 user 对象 builder 模式 改良 下面 教 大家用 builder 模式 改良 下 下面 是 改良 后 的 代码 stringcontent inttype intstatus datefinishdate returnnewtask this publiclonggetid 说下 简单 思路 在 bean 类 里面 新建 一个 静态 内 部类 xxxbuilder 把 bean 类 所有 参数 复制到 xxxbuilder 然后 在 xxxbuilder 新建 必须 参数 的 构造 器 其他 参数 使用 变量名 作为 方法 然后 返回 自身 this 以便 形成 链式 调 用在 bean 类 里面 新建 一个 接收 xxxbuilder 参数 的 私有 构造 器 避免 使用 new 创建 对象 在 xxxbuilder 类 新建 一个 build 方法 开始 构建 bean 类 也是 作为 链式 调用 的 结束 使用方法 使用 方式 如下 先 创建 构造 器 然后 在 每个 方法 后 使用 带出 所有 方法 一目了然 最后 调用 build 方法 以 结束 链式 调用 创建 bean 参考 代码 如下 结果 输出 taskidname 紧急任务 content 处理 一下 这个 任务 模式 的 优点 链式 调用 优雅 清晰 一目了然 一行 代码 完成 对象 创建 避免了 多行 代码 赋值 过程 出错 省 去了 大量 冗余 变量 避免 变量 复制 出错 builder 模式 的 缺点 需要 冗余 的 builder 类 以及 大量 相等 重复 的 成员 变量 大大 增加了 代码 量 维护 难度 相对 较 大只 适合 一次 赋值 创建 对象 多次 赋值 的 场景 还需要 新增 set 方法 配合 不是 很 灵活 lombok 实现 builder 模式 常规 的 builder 模式 需要 新增 大量 的 代码 维护 难度 比 较大 这里 栈 长 再 介绍 一下 lombok 中 的 builder 模式 一个 builder 注解 搞定 所有 轻松 维护 用 lombok 改良 后 的 代码 如下 我 还能 说什么 两个字 真香 再来 看下 怎么 使用 或者 new 都不 要了 直接 调用 静态 方法 接下来 我们 来 看下 这个 builder 注解 到底 做了 什么 finallongid finalstringname finalinttype finalintstatus 这是 反编译 后 的 代码 可以 看出来 逻辑 都是 一样 的 lombok 还 可以 添加 各 种类 构造 器 tostring 等 系列 注解 几个 注解 完全可以 达到 想要 的 效果 但 代码 量 和 可维护性 是 天壤之别 很多人 不 建议 使用 lombok 仁者见仁智者见智 这里 不再 讨论 使用 lombok 带 来了 很多 便利 不用 多 说是 真的 香 东西 是 好东西 就是 要 团队 规范 一起 使用 避免 踩 坑 java 实现 builder 模式 java 带 来了 函数 式 接口 编程 所以在 java 中 可以 一个 实现 通用 的 instantiator instancevalue c value returnvalue 使用 方式 javatasknew with javatasksetidl with javatasksetname 紧急任务 with javatasksettype with 处理 一下 这个 任务 with with build javatask 这样一来 任何 带有 默认 构造 器 和 set 方法 的 类 都可以 使用 这个 通用 的 builder 模式 了 虽然 利用 java 是 实现 了 通用 有 builder 模式 但 还是 有 很多 冗余 的 代码 而且 本质 还是 调用 的 set 方法 所以 和 set 比起来 只是 多了 一个 链式 调用 而已 springboot 中 的 builder 模式 springboot 是 现在 主流 的 应用 框架 其中 也 用 到了 builder 模式 可见 builder 模式 的 常 见性 下面 再来 看下 springboot 是 怎么 应用 builder 模式 的 sources parentclass child bannermode bannermodeoff run args 如上 代码 所示 这是 springboot 的 链式 启动 方式 我们 来看 它是 怎么 做的 它是 新增 了 一个 xxxbuilder 类 然后 在 中 新增 了 个 的 成员 变量 然后再 新增 变量 对应 的 方法 所以 springboot 只是 用 包 装了 一下 而已 写法 有所不同 但 中心思想 都是 一样 的 这里 就不 再 演示 了 大家 也 可以 了 借鉴 一下 总结 本文 说了 同事 写 的 疯狂 的 类 构造 器 然后再 介绍 了 用 set 方法 改良 以及 使用 种 builder 模式 改良 的 方式 下面 来 总结 一下 吧 常规 的 builder 模式 lombok 实现 builder 模式 推荐 java 实现 builder 模式 springboot 中 的 builder 模式 如果 团队 有 使用 lombok 那么 lombok 无疑是 最佳 推荐 的 方式 代码 量 少 使用 简单 方便 维护 其他 三种 实现 方式 都 各有利弊 大家 都可以 参考 使用 总之 别 再写 疯狂 的 类 构造 器 了 实战 源码 