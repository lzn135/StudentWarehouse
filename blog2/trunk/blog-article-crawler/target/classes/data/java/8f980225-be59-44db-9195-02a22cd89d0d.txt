小白 也 能看懂 的 插件 化 droidplugin 原理 二 反射 机制 和 hook 入门 前言 在上 一篇 博 文 小白 也 能看懂 的 插件 化 droidplugin 原理 一 动态 代理 中 详细 介绍 了 droidplugin 原理 中 涉及到 的 动态 代理 模式 看完 上篇 博 文 后 你 就会 发现 原来 动态 代理 真的 非常 简单 只不过 就是 实现 一个 接口 重写 一下 invoke 方法 而已 不错 其实 很多 看似 highlevel 的 技术 都 并没有 想象 中 的 那么 晦涩 难懂 只要 你 肯 下定决心 去 了解 它 去 认识 它 去 学习 它 你 就会 发现 原来 都是 可以 学得 懂 的 本篇 博 文 将 介绍 droidplugin 框架 中常 用到 的 另外 两个 知识点 反射 机制 和 hook 技术 本 系列 文章 的 代码 已经 上传 至 github 下载 地址 本篇 文章 对应 的 代码 在 和 包 内 一 反射 机制 反射 是什么 java 反射 机制 是 在运 行 状态 中 对于 任意 一个 类 都能够 知道 这个 类 的 所有 属性 和 方法 对于 任意 一个 对象 都能够 调 用它 的 任意 方法 和 属性 这种 动态 获取 信息 以及 动态 调用 对象 方法 的 功能 称为 java 语言 的 反射 机制 反射 机制 的 作用 反射 可以 在运 行时 判断 任意 一个 对象 所属 的 类 反射 可以 在运 行时 构造 任意 一个 类 的 对象 反射 可以 在运 行时 判断 任意 一个 类 拥有 的 任意 成员 变量 和 方法 反射 可以 在运 行时 调用 任意 一个 类 的 任意 方法 可以 通过 反射 机制 生成 动态 代理 来 一组 反射 机制 小 示例 首先 创建 一个 类 供 反射 调用 测试 使用 暂且 将 类 名 bereflected 并在 类 中 添加 两个 成员 变量 三个 普通 方法 一个 静态 变量 一个 静态 方法 具体 代码 如下 被 反射 测试 的 类 loggeri stringparam loggeri loggeri loggeri 通过 反射 获取 bereflected 的 class 类型 并 将其 初始化 其中 logger 是 楼主 封装 的 一个 日志 打印 类 无需 在意 这些 细节 通过 反射 获取 bereflected 所属 的 类 loggeri 通过 反射 创建 实例 化 一个 类 loggeri 输出 如下 通过 反射 访问 私有 方法 和 私有 成员 变量 并 改变 私有 变量 的 值 我们 都 知道 对于 一个 私有 类型 的 变量 在 没有 提供 公开 的 set 之类 方法 的 情况下 想 更改 它 的 值 是 不可能 的 但是 利用 反射 就可以 做到 通过 反射 调用 一个 私有 方法 和 成员 变量 method true 将此 值 设为 true 即可 访问 私有 的 方法 和 成员 变量 methodinvoke bereflected 访问 普通 成员 变量 和 方法 是 需 要在 调用 invoke 方法 是 传入 该类 的 对象 field true loggeri 改变 前 的 值 fieldget bereflected fieldset bereflected 我 是 field 被 改变 后 的 值 loggeri 改变 后 的 值 fieldget bereflected 输出 如下 改变 前 的 值 改变 后 的 值 我 是 field 被 改变 后 的 值 通过 反射 访问 静态 方法 和静 态变量 访问 静态 方法 和 变量 时 不需要 传入 所属 类 的 对象 传入 null 即可 访问 代码 如下 通过 反射 调用 一个 静态 的 方法 和 变量 staticmethod null staticfield true loggeri null 输出 如下 通过 反射 访问 一个 带 参数 的 方法 访问 带 参数 的 方法 是 需 要在 后面 传入 一组 参数 的 类型 通过 反射 访问 一个 带 参数 的 方法 true methodinvoke bereflected 我 是 被 传入 的 参数 输出 如下 我 是 被 传入 的 参数 通过 反射 获取 类 中所 有的 成员 变量 和 方法 遍历 类 中所 有的 方法 和 成员 变量 for loggeri for loggeri 输出 如下 看完 上面 几个 例子 之后 你 是不是 觉得 反射 还真是 神奇 可以 做到 很 多用 常规 方法 做不到 的 操作 当然 上面 只是 示例 了 反射 机制 中最 基本 的 一些 调用 而已 感兴趣 的 朋友 可以 自行 查阅 官方 文档 废话 不多 说了 我们 尽快 开始 介绍 hook 技术 二 hook 入门 hook 中文 释 意 是 钩子 这两天 楼主 也 一直在 琢磨 hook 到底 指的是 什么 如何 才 能用 一种 简单 易懂 生动 形象 的 解释 来 提 现 hook 技术 以 楼主 目前 对 hook 的 理解 通俗 来 将 就是 通过 某种 手段 对 一件 事物 进行 偷梁换柱 从而 劫持 目标 来 以 达到 控制 目标 的 行为 的 目的 从 技术 角度 来说 就是 替换 原有 的 对象 拦截 目标 函数 方法 从而 改变 其 原有 的 行为 在 月份 初 刚开始 学习 hook 技术 时 写了 一个 关于 替换 汽车 引擎 的 小 例子 今天 就把 这个 例子 贴出 来吧 先说 一下 大体 流程 首先 我们 会有 一个 简单 的 汽车 类 汽车 类 里面 有 个 引擎 的 对象 当然 汽车 引擎 都是 有 标准 的 这里 即为 接口 为 简单 起见 我们 这里 的 汽车 引擎 标准 暂且 只有 一个 最大 速度 的 指标 后续 我们 会 通过 反射 机制 来 替 换掉 汽车 引擎 以 达到 提高 最大 速度 的 目的 例子 非常 简单 通过 这个 例子 我们 很 容易 就能 初步 的 理解 hook 技术 汽车 类 代码 如下 loggeri carclass 我 卯足 劲 玩命 跑 的 最大 速度 可以 达到 可以 看到 汽车 类 里面 有 一个 carengine 汽车 引擎 的 属性 汽车 引擎 接口 代码 如 下车 引擎 接口 汽车 引擎 类 代码 如 下车 引擎 return 一个 简单 的 小汽车 搞定 了 试跑 一下 stringargs carcarnewcar carshowmaxspeed 输出 结果 car 我 卯足 劲 玩命 跑 的 最大 速度 可以 达到 额 好吧 卯足 劲 才能 跑到 这 发动机 速度 有点 作为 一个 飙车 党 肯定 不能 忍 必须 改 装在 改装 之前 我们 需要 先 观察 从 哪里 下手 合适 可以 看到 在 car 类 里面 有 个 carengine 的 对象 我们 需要 做的 就是 将 这个 carengine 的 对象 替换成 我们 自己 创建 的 引擎 类 这个 引擎 类 类 需要 有这 和 carengine 一样 的 特征 也就是说 需要 实现 接口 或者 直接 继承 carengine 然后 拦截 到 maxspeed 方法 并 修改 返回值 那么 这里 我们 其实有 两种 方案 一种 方案 可以 重新 创建 一个 引擎 类 让 其 继承 carengine 或者 实现 都行 然后 通过 反 射来 替换 car 对象 中 的 carengine 属性 另一种 方案 写 一个 动态 代理 让 其 对 carengine 进行 代理 然 后用 反射 替换 第一种 方案 首先 创建 一个 evilcarengine 类 详细 代码 如下 然 后用 反射 机制 替 换掉 原来 的 汽车 引擎 stringargs carcarnewcar loggeri testclass 替换 前 carshowmaxspeed 怎样 在 不 手动 修改 carengine 类 和 car 类 的 情况下 将 大 速度 提高 carengine true carengine car 方法 carengine catch exceptione loggeri testclass 替换 后 carshowmaxspeed 输出 结果 test 替换 前 car 我 卯足 劲 玩命 跑 的 最大 速度 可以 达到 test 替换 后 car 我 卯足 劲 玩命 跑 的 最大 速度 可以 达到 第二种 方案 首先 创建 一个 动态 代理 类 并 拦截 maxspeed 方法 修改 返回值 objectobject maxspeedequals methodgetname loggeri 我 是 动态 代理 我 已 拦截 到 maxspeed 方法 并 偷偷 返 回了 另一个 值 objectargs 同理 利用 反射 替 换掉 原来 的 汽车 引擎 stringargs carcarnewcar loggeri testclass 替换 前 carshowmaxspeed 怎样 在 不 手动 修改 carengine 类 和 car 类 的 情况下 将 大 速度 提高 carengine true carengine car 方法 carengine catch exceptione loggeri testclass 替换 后 carshowmaxspeed 输出 结 果与 方案 一 一致 写到 这里 hook 的 基本 用法 也 已经 写 完了 看完 例子 之后 或许 你 已经 对 hook 有 了 一个 基本 的 认识 但 值得一提的是 在 test 类 中 的 第 行 代码 中 我们 首先 取 出了 car 中 的 carengine 对象 然后 将此 对象 传 入了 它 的 替身 中 为什么 要 这样 做的 在 替身 中 不 传入 carengine 或者 重新 new 一个 新 的 carengine 不 行吗 这是 一个 关键 点 我们 需要 明白 的 是 这里 我们 只是 想 修改 一下 引擎 的 最大 速度 而 并不 希望 引擎 的 其他 属性 受到影响 我们 把 从 car 中 取出 原有 的 carengine 对象 传入 替身 中 这样 替身 就可以 只 选择 我们 关心 的 方法 进行 修改 对于 我们 不想 修改 的 方法 直接 调用 传经 来 的 carengine 对 方法 即可 因为 这里 的 例子 为了 简单 起见 没有 添加 其他 的 方法 和 属性 所以 这一点 需要 着重 说明 一下 三 小结 其实 hook 技术 简单 来说 可以用 替换 拦截 来 形容 并没有 用到 新技术 hook 本身 并 不难 它 的 难点 在于 你 在对 一段 代码 hook 之前 需要 找出 一个 合适 的 hook 点 也就是说 分 析出 从 哪 下手 很 关键 这就 要求 你 对 将要 hook 的 目标 代码 的 执行 流程 非常 熟悉 本篇 博 文 只是 初步 认识一下 hook 技术 下一 篇 博 文 将会 介绍 如何 通过 hook 技术 拦截 android 中 startactivity 方法 并在 分析 的 过程中 介绍 哪些 才是 合适 的 hook 点 感兴趣 的 朋友 可以 关注 一下 敬请期待 本文 地址 转 载于 