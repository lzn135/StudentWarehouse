栈 和 队列 互相 实现 一文 弄懂 它们 的 关系 前言 栈 和 队列 是 比较 基础 的 数据结构 无论 在工作中 还是 在 面试 中 栈 和 队列 都用 的 比较 多在 计算机 的 世界 你 会 看到 队列 和 栈 无处不在 栈 一个 先进后出 的 数据结构 队列 一个 先进先出 的 数据结构 栈 和 队列 这两种 数据结构 同时 也 存在 某种 联系 用 栈 可以 实现 队列 用 队列 也 可以 实现 栈 海边 风景 不错 欣赏 一下 风景 下面 开始 步入 正题 学 完 这篇 咱们 再 接着 看 风景 两个 栈 实现 一个 队列 思路 让 数据 入 stack 然后 栈 stack 中 的 数据 出 栈 并入 到 栈 stack 然后 出 stack 代码 如下 构造 函数 funcconstructor stacklistnew 尾部 插入 func thiscqueue appendtail valueint value 头部 删除 back 函数 返回 其 list 最 尾部 的 值 func thiscqueue deletehead int 如果 第二个 栈 为 空 ifthisstacklen forthisstacklen thisstackremove thisstackback ifthisstacklen ethisstackback thisstackremove e returnevalue int return 先 调用 appendtail 函数 将 所有 元素 插入 stack 在 调用 deletehead 函数 将 stack 中 的 元素 转移到 stack 中 再将 元素 再出 栈 再 调用 deletehead 时 先 判断 statck 是否 为 空 为 空 则将 stack 元素 移 动到 stack 中 然后 将 stack 中 的 栈 顶 元素 保存 并 弹 栈 两个 队列 实现 一个 栈 思路 两个 队列 实现 一个 栈 使 用了 队列 交换 的 思想 代码 如下 构造 函数 funcconstructor smystack returnfunc smystack push xint squeueappend squeuex forlen squeue gtsqueueappend squeuesqueue smystack pop smystack top smystack empty boolreturnlen squeue 先将 元素 入 对 到 queue 此时 queue 为 交换 queue 和 queue 此时 queue 为 queue 中有 个 元素 再 执行 push 操作 时 len queue gt 此时 再把 queue 中 的 元素 插入 queue 的 尾部 然后 将 queue 和 queue 进行 交换 此时 相当于 插入 queue 的 两个 元素 的 位置 发 生了 交换 并 保 存在 queue 中 最后 将 queue 中 的 元素 出 队 这样 就可以 保证 后 插入 的 元素 先出 不断 执行 push 操作 就行 一个 队列 实现 一个 栈 思路 使用 一个 队列 时 将 当前 插入 元素 前面 的 所有 元素 先出 队 再 入队 即可 代码 如下 smystack returnfunc smystack push xint nlen squeue squeueappend squeuex squeuesqueue smystack pop smystack top smystack empty boolreturnlen squeue 每次 执行 push 操作 如果 queue 存在 元素 则将 新 插入 元素 前 的 所有 元素 出 队 然后 依次 进 队 这样 新 插入 的 元素 就在 队 首 了 絮叨 栈 和 队列 作为基础 的 数据 大家 务必 掌握 其 性质 和 功能 知道 它们 之间 的 某种 依存关系 才能 灵活 运用上 面的 算法 虽然 很简单 但是 思路 很 巧妙 还有 其他 解法 大家 也 可 仔细 研究 必有 收获 有 本 数据结构 的 书 ltlt 大话 数据结构 gtgt 推荐给 大家 专注 后台 开发 相关 技术 广度 深度 并存 干货 情怀 同在 微 信 搜索 晨 梦 思 雨 关注 这个 不一样 的 程序员 