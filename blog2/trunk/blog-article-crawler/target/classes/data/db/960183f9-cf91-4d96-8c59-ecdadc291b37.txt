java 中 synchronized 实现 对象 锁 的 两种 方式 及 原理 解析 简介 本文 将 介绍 java 中 两种 对象 锁 及其 实现 方式 分 别是 同步 代码 块 锁 和 方法 锁 我们 将 解决 上 一篇 文章 java 中 线程 安全 和 线程 不安全 解析 和 示例 中 提到 的 线程 不安全 问题 看看 通过 synchronized 的 对象 锁 怎样 轻松 解决 该 问题 一 同步 代码 块 锁 案例 通过 同步 代码 块 锁 实现 两个 线程 对 同一个 全局变量 count 各自 执行 万次 count 验证 结果 是否 等于 万 而 不会 出现 小于 万 的 情况 完整 代码 实现 method 关键 同步 代码 块 的 方式 操作 同一 变量 达到 线程 安全 的 效果 synchronized this 线程 名 getname 运行 开始 for intiilti 线程 getname 运行 结束 stringargs instance instance threadstart threadstart while threadisalive threadisalive 若有 线程 如果 还在 活动 则不 执行 下一步 等同于 threadjoin 方法 期待 结果 实际 结果 count 运行 结果 线程 名 thread 运行 开始 线程 thread 运行 结束 线程 名 thread 运行 开始 线程 thread 运行 结束 期待 结果 实际 结果 分析 运行 结果 我们 发现 使 用了 synchronized 关键 字后 线程 thread 先 执行 等到 其 结束 后 thread 才 开始 执行 如果 不 使用 synchronized 关键字 执行 结果 可能 会是 thread 和 thread 几乎 同时 执行 几乎 同时 运行 结束 这就 说明 使 用了 synchronized 关键 字后 将 多个 线程 的 并行 变 为了 串行 二 方法 锁 本例 仅 展示 方法 锁在 控制 线程 串行 执行 的 示例 方法 锁 保证 线程 安全 的 效果 跟 同步 代码 块 是 一致 的 method 关键 synchronized 可以 保证 此 方法 被 顺序 执行 线程 执行 完 秒钟 后 线程 再 执行 秒 不加 synchronized 线程 和 线程 将 同时 执行 线程 getname 运行 开始 try 模拟 执行 一段 操作 耗时 秒钟 threadsleep 线程 getname 运行 结束 catch stringargs 模拟 同一个 对象 下 两个 线程 同步 执行 一个 方法 串行 执行 则为 线程 安全 并行 执行 则为 线程 不安全 instance instance threadstart threadstart while threadisalive threadisalive 测试 结束 运行 结果 线程 thread 运行 开始 线程 thread 运行 结束 线程 thread 运行 开始 线程 thread 运行 结束 测试 结束 发现 运行 结果 中 多个 线程 也是 串行 执行 的 效果 跟 同步 代码 块 锁 是 一致 的 三 synchronized 关键字 是 怎么 保证 线程 安全 的 呢 在 java 中所 有的 对象 都会 有 一把 锁 叫做 内置 锁 也 称作 监视器 锁 这是 种 排他 锁 排他 锁 一个 线程 获取 后 其他 线程 只能 等待 其 释放 后 才有 机会 获 得该 锁 java 中 每个 对象 都可以 把 内置 锁 当做 一个 同步 锁 来 使用 当 一个 线程 在 进入到 synchronized 代码 块 前 时会 自动 获 取到 监视器 锁 此时 其他 线程 在 访问 synchronized 代码 块 时 就 会被 堵塞 挂起 被 拒之门外 的 意思 拿到 锁 的 线程 会在 执行 完成 或者 抛出 异常 或者 调用 wait 系列 方法 时 释放 该 锁 其他 线程 只能 等待 锁 被 释放 后 才能 获取 该 锁 通俗 的 讲 synchronized 关键字 将 代码 块 中 代码 由 并行 转变 成了 串行 这样 就 保证 了 代码 被 顺序 执行 四 synchronized 在 内存 层面 是 如何 实现 加锁 和 释放 锁 的 进入 synchronized 代码 块 时 会将 代码 块 内 用到 的 变量 从 该 线程 的 工作 内存 中 清除 转而 从 主 内存 中 获取 退出 synchronized 代码 块 时 会将 代码 块 内 用到 的 变量 的 修改 刷 新到 主 内存 中 这 其实 就是 synchronized 解决 共享 变量 内存 可 见性 的 原理 关于 synchronized 的 性质 可 见性 可 重入 性 我 会在 后续 其他 文章 中 详细 解释 五 synchronized 将 线程 的 并行 处理 转为 串行 处理 有 什么 缺点 synchronized 将 并行 改为 串行 当然会 影响 程序 的 执行 效率 执行 速度 会 受到影响 其次 synchronized 操作 线程 的 堵塞 也 就是 由 操作 系统控制 cpu 的 内核 进行 上下文 的 切换 这个 切换 本身 也是 耗时 的 所以 使用 synchronized 关键字 会 降低 程序 的 运行 效率 六 使用 synchronized 关键字 需要 注意 什么 synchronized 使 用时 需要 注意 的 地方 锁 对象 不 能为 空 锁 对象 的 信息 是 保留在 对象 头中 的 如果 对象 为 空 则 锁 的 信息 也就 不存在 了 作用 域 不宜 过大 synchronized 代码 块 的 代码 量 不宜 过多 如果把 过多 的 代码 放在 其中 程序 的 运 行会 变为 串行 速度 会 下降 各个 线程 并行 可以 提高 效率 我们 应该 仅把 那些 影响 线程 安全 的 代码 放入 synchronized 代码 块 中 串行 执行 不需要 考虑 线程 安全 的 代码 并行 执行 达到 效率 最高 避免 死锁 避免 让 线程 对 锁 持有 并 等待 的 情况 出现 后续 文章 将 讲解 死锁 的 相关 知识 七 总结 本文 讲 解了 java 中 的 对象 锁 的 两种 实现 方式 分别 是 以下 两种 实现 形式 方式 一 同步 代码 块 锁 synchronized 共享 变量 需要 同步 的 代码 方式 二 方法 锁 需要 同步 的 代码 无论 你 使用 哪一种 形式 都应 该在 保证 同步 的 情况下 尽量 减少 同步 代码 的 内容 这样 可以 提高 程序 的 运行 效率 还能 保证 线程 的 安全 喜欢 本文 请 点 赞 和 收藏 也 欢迎 继续 阅 读本 专栏 多线程 的 其他 文章 