class.forname 用法 及 与 new 区别 平时 开发 中 我们 经常 会发 现 用到 classforname 方法 为什么 要用 呢 下面 分析 一下 主要功能 classforname xxxxxxx 返回 的 是 一个 类 classforname xxxxxxx 的 作 用是 要求 jvm 查找 并 加载 指定 的 类 也就是说 jvm 会 执行 该类 的 静态 代码 段 在 初始化 一个 类 生成 一个 实例 的 时候 newinstance 方法 和 new 关键字 除了 一个是 方法 一个是 关键字 外 最主要 有 什么区别 它们 的 区别 在于 创建 对象 的 方式 不一样 前者 是 使用 类 加载 机制 后者 是 创建 一个 新 类 那么 为什么 会有 两种 创建 对象 方式 这 主要 考虑到 软件 的 可 伸缩 可 扩展 和 可 重用 等 软件设计 思想 java 中 工厂 模式 经常 使用 newinstance 方法来 创建 对象 因此 从 为什么 要使 用 工厂 模式 上 可以 找到 具体 答案 例如 example factory cnewinstance 其中 是 example 的 接口 可以 写成 如下 形式 classname factory cnewinstance 进一步 可以 写成 如下 形式 从 xml 配置文件 中 获得 字符串 classname factory cnewinstance 上面 代码 已经 不存在 example 的 类 名称 它 的 优点 是 无论 example 类 怎么 变化 上述 代码 不变 甚至 可以 更换 example 的 兄弟 类 只要 他们 继承 就可以 从 jvm 的 角度 看 我们 使用 关键字 new 创建 一个 类 的 时候 这个 类 可以 没有 被 加载 但是 使用 newinstance 方法 的 时候 就必须 保证 这个 类 已经 加载 这个 类 已经 连 接了 而 完成 上面 两个 步骤 的 正是 class 的 静态 方法 forname 所 完成 的 这个 静态 方法 调 用了 启动 类 加载 器 即 加载 javaapi 的 那个 加载 器 现在 可以 看出 newinstance 实际上 是 把 new 这个 方式 分解为 两步 即 首先 调用 class 加载 方法 加载 某个 类 然后 实例 化 这样 分步 的 好处 是 显而易见 的 我们 可以 在 调用 class 的 静态 加载 方法 forname 时 获得 更好 的 灵活性 提供给 了 一种 降 耦 的 手段 二 new 和 classforname 有 什么区别 其实 上面 已经 说到 一些 了 这 里来 做个 总结 首先 newinstance 是 一个 方法 而 new 是 一个 关键字 其次 class 下 的 newinstance 的 使用 有 局限 因为 它 生成 对象 只能 调用 无 参 的 构造 函数 而 使用 new 关键字 生成 对象 没有 这个 限制 简言之 newinstance 弱 类型 低效率 只能 调用 无 参 构造 new 强 类型 相对 高效能 调用 任何 public 构造 classforname 返回 的 是 类 classforname newinstance 返回 的 是 object 转 载于 