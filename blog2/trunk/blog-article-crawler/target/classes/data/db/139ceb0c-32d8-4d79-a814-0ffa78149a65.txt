设计 模式 原型 模式 设计 模式 原型 模式 克隆羊 问题 现在 有 一只 羊 tom 姓 名为 tom 年龄 为 颜色 为 白色 请 编写程序 创 建和 tom 羊 属性 完全相同 的 只 羊 传统 方式 解决 克隆羊 问题 stringname intage stringcolor stringargs tom 白色 sheepgetname sheepgetage sheepgetcolor sheepgetname sheepgetage sheepgetcolor sheepgetname sheepgetage sheepgetcolor sheepgetname sheepgetage sheepgetcolor sheep sheep sheep sheep sheep 传统 的 方式 的 优缺点 优点 是 比较好 理解 简单 易 操作 在 创建 新 的 对象 时 总是 需要 重新 获取 原始 对象 的 属性 如果 创建 的 对象 比较复杂 时 效率 较低 总是 需要 重新 初始化 对象 而 不是 动态地 获得 对象 运行时 的 状态 不够 灵活 改进 的 思路 分析 思路 java 中 object 类 是 所有 类 的 根 类 object 类 提供 了 一个 clone 方法 该 方法 可以 将 一个 java 对象 复制 一份 但是 需要 实现 clone 的 java 类 必 须要 实现 一个 接口 cloneable 该 接口 表示 该类 能够 复制 且 具有 复制 的 能力 gt 原型 模式 原型 模式 介绍 以及 实现 原型 模式 prototype 模式 是 指用 原型 实例 指定 创建 对象 的 种类 并且 通过 拷贝 这些 原型 创建 新 的 对象 原型 模式 是 一种 创建 型 设计 模式 允许 一个 对象 再 创建 另外 一个 可 定制 的 对象 无需 知道 如何 创建 的 细节 工作 原理 是 通过 将 一个 原型 对象 传给 那个 要 发动 创建 的 对象 这个 要 发动 创建 的 对象 通过 请求 原型 对象 拷贝 它们 自己 来 实施 创建 即 对象 clone 形象 的 理解 孙大圣 拔出 猴 毛 变出 其它 孙大圣 原型 模式 原理 结构图 uml 类 图 prototype 原型 类 声明 一个 克隆 自己 的 接口 具体 的 原型 类 实现 一个 克隆 自己 的 操作 client 让 一个 原型 对象 克隆 自己 从而 创建 一个 新 的 对象 属性 一样 原型 模式 解决 克隆羊 问题 stringname intage stringcolor sheep superclone catch stringargs tom 白色 sheepsheep sheep sheepclone sheepsheep sheep sheepclone sheepsheep sheep sheepclone sheepsheep sheep sheepclone sheep sheep sheep sheep sheep 原型 模式 在 spring 框架 中 源码 分析 spring 中 原型 bean 的 创建 就是 原型 模式 的 应用 浅 拷贝 的 介绍 对于 数据类型 是 基本 数据类型 的 成员 变 量浅 拷贝 会 直接进行 值 传递 也 就是 将该 属性 值 复制 一份 给 新 的 对象 对于 数据类型 是 引用 数据类型 的 成员 变量 比如说 成员 变量 是 某个 数组 某个 类 的 对象 等 那么 浅 拷贝 会 进行 引用 传递 也 就是 只是 将该 成员 变量 的 引用 值 内存地址 复制 一份 给 新 的 对象 因为 实际上 两个 对象 的 该 成员 变量 都 指向 同一个 实例 在 这种 情况 下在 一个 对象 中 修改 该 成员 变量 会 影响到 另一个 对象 的 该 成员 变量值 前面 我们 克隆羊 就是 浅 拷贝 浅 拷贝 是 使用 默认 的 clone 方法来 实现 sheep sheep superclone 深 拷贝 基本 介绍 复制 对象 的 所有 基本 数据类型 的 成员 变量值 为 所有 引用 数据类型 的 成员 变量 申请 存储空间 并 复制 每个 引用 数据类型 成员 变量 所 引用 的 对象 直到 该 对象 可达 的 所有 对象 也就是说 对象 进行 深 拷贝 要对 整个 对象 进行 拷贝 深 拷贝 实现 方式 重写 clone 方法来 实现 深 拷贝 深 拷贝 实现 方式 通过 对象 序列化 实现 深 拷贝 推荐 深 拷贝 的 实现 代码 构造 器 因为 该类 的 属性 都是 string 因此 我们 这里 使用 默认 的 clone 完成 即可 属性 引用 类型 super 深 拷贝 方式 使用 clone 方法 这里 完 成对 基本 数据类型 属性 和 string 的 克隆 deepsuperclone 对 引用 类型 的 属性 进行 单独 处理 deepprototype 深 拷贝 方式 通过 对象 的 序列化 实现 推荐 创建 流 对象 ry 序列化 bos ooswriteobject this 当前 这个 对象 以 对象 流 的 方式 输出 反 序列化 bostobytearray bis deepprototype oisreadobject exceptione 关闭 流 trybosclose oosclose bisclose oisclose catch exceptione egetmessage stringargs pname 宋江 大牛 小牛 方式 完成 深 拷贝 deepprototypep deepprototype pclone 方式 完成 深 拷贝 deepprototypep deepprototype pdeepclone 原型 模式 的 注意事项 和 细节 创建 新 的 对象 比较复杂 时 可以 利用 原型 模式 简化 对象 的 创建 过程 同时 也 能够 提高 效率 不用 重新 初始化 对象 而是 动态地 获得 对象 运行时 的 状态 如果 原始 对象 发生变化 增加 或者 减少 属性 其它 克隆 对象 的 也 会发 生 相应 的 变化 无需 修改 代码 在 实现 深 克隆 的 时候 可能 需要 比较复杂 的 代码 缺点 需 要为 每一个 类 配备 一个 克隆 方法 这对 全新 的 类 来说 不是 很难 但对 已有 的 类 进行 改造 时 需要 修改 其 源代码 违背 了 ocp 原则 