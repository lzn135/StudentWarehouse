fpga 深度 学习 gpu 加速 tornadovm 使用 gpu 和 fpga 加速 java fpga 深度 学习 gpu 加速 重要 要点 tornadovm 是 一个 编程 和 执行 框架 用于 在 异构 硬件 多核 cpugpu 和 fpga 上 卸载 和 运行 jvm 应用程序 tornadovm 通过 opencl 的 新 后端 扩展 了 graaljit 编译器 为 tornadovm 编写 的 应用程序 是 单 源代码 相同 的 代码 用于 表示 主机 代码 和 加速 的 代码 tornadovm 可以 在 计算 设备 之间 执行 实时 任务 迁移 去年 三月 我 在 qconlondon 上 发表 了 有关 tornadovm 的 演讲 在 其中 我 对 tornadovm 进行了 介绍 并 解释 了 其 工作 原理 在 本 文中 我 从 qconlondon 演讲 中进 行了 扩展 并 展示 了 有关 开发人员 如何 通过 在 异构 硬件 上 自动 运行 java 来 从中 受益 的 更多 详细信息 首先 我 将 提供 tornadovm 项目 和 体系结构 的 一般 概述 其次 我 将 通过 一个 实际 的 例子 来 说明 tornadovm 的 不同 部分 为什么 我们 需要 类似 tornadovm 的 东西 没有 一种 单一 的 计算机体系结构 最适合 有效地 执行 所有 类型 的 工作 负载 近年来 这 导致 异构 硬件 的 激增 这 意味着 我们 编程 的 每个 系统 都 可能 包含 多种 计算 元素 这些 元素 中 的 每一个 都有 不同 的 硬件 特性 硬件 的 异构 性 使 程序员 能够 在 降低 能耗 的 同时 提高 其 应用程序 的 性能 这些 用于 计算 的 新型 异构 设备 包括 多核 cpu 图形 处理 单元 gpu 和 现场 可编程 门阵列 fpga 这种 多样性 很好 但是 我们 需要 一种 有效地 对 这些 新 设备 进行 编程 的 方法 两种 最受 欢迎 的 异构 编程 语言 cuda 和 opencl 就是 一个 典型 的 例子 但是 它们 在 api 中 公 开了 一些 低级 功能 因此 很 难被 非专业 用户 使用 例如 我 突出 显示 了 以下 来自 opencl 标准 的 引用 opencl 的 目标 是 希望 编写 可 移植 但 高效 的 代码 的 专业 程序员 因此 opencl 提供 了 底层 硬件 抽象 以及 支持 编程 的 框架 并且 公 开了 底层 硬件 的 许多 细节 前面 的 声明 也 适用于 cuda 和 类似 的 并行 编程 模型 在 行业 和 学术界 开发人员 倾向于 使用 高级 的 面向对象 的 编程 语言 而 不是 使用 低级 的 编程 语言 这些 语言 通常在 托管 的 运行时 环境 例如 javarpython 和 javascript 上 执行 尽管 许多 程序员 可能 希望 这样 的 编程 语言 已经 适 合在 异构 硬件 上 透明地 执行 但 现 实是 它们 的 支持 非常 有限 或 根本 没有 在 本 文中 我们 探索 tornadovm 它是 用于 异构计算 的 低级 并行 编程 语言 的 替代 方法 我们 将 展示 开发人员 如 何在 无需 任何 有关 并行计算 体系结构 或 并行 编程 模型 的 知识 的 情况下 使用 多核 cpu 和 gpu 简而言之 tornadovm 是 用于 jvm 语言 的 并行 编程 框架 可以 透明 且 动态地 将 java 字节 码 卸 载到 opencl 中 并在 异构 硬件 上 执行 生成 的 代码 此外 tornadovm 集 成了 优化 的 运行时 可以 重新 使用 设备 缓冲区 并 保存 跨 设备 的 数据传输 还 集 成了 新颖 的 动态 应用程序 重新配置 组件 可以 在 计算 设备 之间 执行 实时 任务 迁移 让我们 开始 吧 下图 显示 了 tornadovm 项目 的 高级 概述 如 我们 所见 tornadovm 由 分层 的 微 内核 软件 体系结构 组成 其中 的 核心 组件 是 tornadovm 执行 引擎 在 最高级别 tornadovm 向 开发人员 公开 api 这是 因为 tornadovm 当前 未 检 测到 并行性 自动 并行 化 相反 它 利用 并行性 因此 tornadovm 需要 一种 方法来 识别 哪些 方法 或 功能 适 合在 gpu 和 fpga 上 运行 此外 tornadovm 包含 一个 核心 运行时 该 运行时 分为 几个 组件 a 具有 新 字节 码 生成器 的 数据流 优化 器 b 一个 小 的 字节 码 解释 器 来 运行 新 的 字节 码 以及 cjit 编译器 和 内存 管理 在 本 文中 我 将 重点 介绍 api 运行时 以及 jit 编译器 的 一般 概述 最后 如上图 所示 tornadovm 当前 使用 最新 的 jdku 和 jvmci 支持 java 并 通过 graalvm 支持 还与 opencl 兼容 因此 可以 在 多种 设备 上 运行 例如 gpuamd 和 和 intel 集成 gpu 例如 maliarm 和 intelhdgraphics 以及 多核 cpu 实践中 的 tornadovm 让我们 通过 一个 实际 的 例 子来 详细 介绍 如下 所示 我 演示 了如 何在 多核 cpugpu 和 集成 gpu 上 使用 tornadovm 编程 和 运行 矩阵 乘法 矩阵 乘法 是 一个 简单 的 代码 用于 说明 tornadovm 中 的 不同 概念 它 构 成了 许多 机器 学习 和 深度 学习 应用程序 的 核心 注意 尽管 tornadovm 是 用 java 编程 的 但可以 通过 graalvmtruffle 的 polyglot 编程 框架 将 计算 内核 公 开给 其他 jvm 语言 以下 代码 段 显示 了 用 java 编程 的 矩阵 乘法 for intiiltsizei for intjjltsizej floatsumffor intkkltsizek suma isize kb ksize jc isize jsum 该 代码 段 显示 了 用于 gpu 计算 的 经典 且 规范 的 矩阵 乘法 示例 为了 使用 tornadovm 加速 此 代码 段 我们 首先 必须 注释 可以 并行 化 的 循环 在 这种 情况下 我们 可以 完全 并行 化 两个 最 外面 的 循环 其中 迭代 之间 没有 依赖 关系 我们 使用 tornadovm 注释 parallel 注释 parallel 如下 所示 for for floatsumffor intkkltsizek suma isize kb ksize jc isize jsumparallel 批注 由 tornadovmjit 编译器 将 java 字节 码 转 换为 opencl 用作 提示 tornadovmjit 编译器 不会 强制 并行 化 相反 它 检查 带 注释 的 循环 是否 可以 并行 化 并在 dimension getglobalid dimension for 循环 替换 等效 的 并行 索引 如果 不能 并行 处理 for 循环 则 tornadovm 退出 并 执行 顺序 代码 此外 开发人员 必须 确 定要 加速 的 java 方法 为此 tornadovm 公 开了 一个 轻量级 的 基于 任务 的 api 该 api 设置 了 要 加速 的 方法 列表 每个 方法 都 对应 一个 任务 开发人员 可以 通过 任务 计划 程序 创建 一组 任务 以下 代码 段 显示 了如 何为 矩阵 乘法 示例 创建 任务 计划 s task streamout result 我们 创建 一个 任务 计划 对象 t 在其 构造 函数 中 我们 传递 任务 的 名称 可 以是 任何 名称 此 名称 对于 更改 将要 在 其中 执行 所有 任务 的 设备 很 有用 然后 我们 定义 了 一组 任务 在此 示例 中 我们 只有 一个 但是 它可 以是 任意 数量 的 任务 任务 的 参数 如下 我们 还 传递 一个 名称 在 本例 中 为 t 和 对 要 加速 的 方法 的 引 用在 本例 中 它 指向 java 类 compute 的 方法 其余 参数 对 应于 该 方法 的 实际 参数 集 最后 我们 指出 要与 主机 cpu 同步 的 变量 或 数组 这是 必需 的 因为 通常 gpu 和 fpga 与 cpu 共享 的 内存 不同 因此 tornadovm 运行时 将为 目标 设备 上 的 所有 变量 分配 空间 并且 它将 执行 从 主机 cpu 到 设备 例如 gpu 的 数据传输 因此 为了 最终 获得 结果 我们 通过 tornadovmapi 调用 streamout 同步 变量 列表 到目前为止 我们 已经 声 明了 任务 并 将其 放置 在 可以 执行 并行 化 的 代码 中 要 使用 tornadovm 执行 应用程序 我们 需 要在 taskschedule 对象 上 调用 execute 方法 这是 一个 阻塞 调用 它将 创建 所有 opencl 缓冲区 创建 执行 图 将 所有 任务 从 java 字节 码 编译 到 opencl 并 最终 在 目标 设备 上 执行 生成 的 opencl 程序 另外 tornadovm 可以 将 许多 方法 组合 在一起 以 在 一个 编译 单元 中一 起 编译 并在 同一 设备 例如 同一 gpu 上 执行 这 为 优化 主机 和 异构 设备 之间 的 数据传输 创造 了 机会 因为 它们 通常 不与 主要 主机 共享 内存 除非 设备 是 集成 gpu 例如 amdapuarmmali 或 请注意 我们 没有 在 源代码 中 设置 任何 特 定于 设备 的 信息 并且 我们 共享 相同 的 代码 以 在 多核 cpugpu 和 fpga 上 运行 tornadovm 运行时 和 jit 编译器 将 根据 体系结构 自动 优化 代码 因此 让我们 运行 我们 的 代码 示例 我 将 首 先向 您 展示 如何 设置 tornadovm 环境 github 上有 所有这些 示例 的 存储 库 运行 矩阵 乘法 设置 torandovm 我们 将 使用 graal 作为 jdk 运行 tornadovm 请注意 我们 会 经常 更新 graal 版本 graalx 集成 到 tornadovm 中 的 计划 于 今年年底 进行 为了 执行 代码 我们 假设 已 安装 opencl 在 此处 查看 所有 先决条件 现在 我们 将 下载 带有 示例 的 存储 库 现在 我们 已经 准备好 执行 示例 我们 可以 从 tornadovm 探索 哪些 设备 可用 和 可见 开始 r openclintel r core tm r r 就 我 而言 我 的 笔记本电脑 上有 三台 设备 可用 nvidiagpuintel 多核 cpu 和 intelhdgraphics 集成 gputornadovm 默认 选择 设备 但是 我们 可以 通过 将 任务 与 设备 关联 来 更改 设备 让我们 从 默认 配置 开始 该 程序 执行 次 矩阵 乘法 方法 并 报告 每次 迭代 的 总 时间 该 方法 是 一个 简单 的 示例 用于 演示 正在 发生 的 事情 稍后 我们 将 使用 jmh 进行 正确 的 性能 比较 ns s totaltime ns s totaltime ns s 请注意 第一次 迭代 要比 其余 的 迭代 花费 更长 的 时间 这是 由于 jit 编译 预热 所致 并且在 我们 使用 jmh 时会 消失 我们 第一次 执行任务 计划 时 tornadovm 会 调用 opencljit 编译器 从 java 字节 码 优化 并 生成 openclc 代码 然后 一旦 生成 代码 tornadovm 将 生成 的 代码 安 装在 代码 缓存 中 并且 如果在 运行时 的 任何时候 再次 执行 相同 的 任务 则 二进制 文件 可以 重 用为 确保 tornadovm 在 gpu 设备 上 运行 我们 可以 启用 调试 信息 如下 所示 available 太好了 tornadovm 在 nvidiagtx 上 运行 我们 的 java 代码 以 实现 矩阵 乘法 作为 参考 我们 还 运行 顺序 应用程序 无需 调用 tornadovmjit 编译器 即可 加速 代码 我们 向 程序 传递 一个 额外 的 参 数来 表明 这一点 ns s totaltime ns s 我们 看到 的 是 即使 使用 tornadovmjit 编译器 第一次 迭代 的 速度 也 要快 倍 然后 从 第二次 迭代 开始 我们 将 java 顺序 代码 的 速度 提高了 倍 但是 请 谨慎 使用 此 数字 在下 一节 中 我们 将 介绍 使用 javajmh 的 性能 比较 如何 更换 设备 我们 可以 通过 命令 更改 在 其中 运行 应用程序 的 设备 例如 要在 上 运行 我们 可以 使用 以下 选项 执行 r r available 语法 如下 在 dellxps 笔记本电脑 上 运行 的 tornadovmformxm 的 性能 使用 这些 选项 我们 可以 轻松 地 开始 获得 一些 性能 结果 下图 显示 了 通过 java 顺序 实 现在 不同 的 opencl 设备 上 运行 tornadovm 时 tornadovm 的 速度 提高 报告 的 提速 对 应于 使用 javajmh 框架 进行 基准 测试 的 平均值 注意 由于 高速化 y 轴 以 对数 标度 表示 所有 使用 jmh 的 基准 与 示例 都 包 含在 同一 存储 库 中 如 我们 所见 与 javahotspot 相比 在 具有 tornadovm 的 多核 cpu 上 运行 可以 达到 倍 在 gpu 上 运行时 与 java 相比 我们 可以 将 intelhd 显卡 和 nvidia 分别 提 高倍 和 倍 执行 模型 与 编译 到目前为止 我们 已经 简要 说 明了 tornadovmapi 以及 如何 在 用户 级别 使用 tornadovm 运行 应用程序 现在 让我们 更 深入 地 了解 tornadovm 如 何在 目标 设备 上 执行 代码 下图 显示 了 jvm 和 tornadovm 之间 的 执行 流 任务 计划 的 定义 以及对 tornadovmapi 的 execute 方法 的 调 用在 单个 java 线程 例如 主 线程 上 运行 execute 方法 是 一个 阻塞 调用 当 该 方法 的 执行 返回 时 它 保证 并行 设备 上 的 执行 已 完成 调用 execute 方法 时 tornadovm 首先 构建 一个 数据流 图 该 图 表示 如何 在 任务 计划 中 的 不同 任务 之间 传递 数据 该 图 用于 优化 数据传输 然后 tornadovm 生成 新 的 字节 码 用于 在 目标 设备 上 协调 执行 的 简单 指令 例如 等 首次 启动 代码 通过 launch 字节 码 时 tornadovm 会 调用 opencljit 编译器 并将 输入 的 java 字节 码 从 每个 任务 每个 要 加速 的 java 方法 转 换为 优化 的 openclc 代码 tornadovm 根据 目标 设备 专门研究 openclc 代码 这 意味着 为 gpu 生成 的 代码 对于 cpu 和 fpga 是 不同 的 这是 由于 以下 事实 opencl 代码 可 跨 设备 移植 但 性 能不 统一 因此 tornadovm 通过 专门 针对 每个 设备 应用 不同 的 优化 来 提高 性能 注意 tornadovmjit 编译器 在 单个 线程 中 运行 因此 正如 我们 在 hotspot 中 看到 的 那样 对于 重 负载 下 编译器 资源 的 潜在 耗尽 存在 一些 担忧 编译 的 最后 一步 是 通过 opencl 驱动程序 调用 执行 的 以 将 经过 优化 和 专用 的 openclc 代码 编译 到 目标 平台 例如 如果 应用程序 在 nvidiagpu 上 执行 则 此 步骤 将 生成 相应 的 ptx 代码 一旦 生成 并 编译 了 opencl 代码 tornadovm 就 会在 目标 设备 上 启动 应用程序 为此 tornadovm 部署 了 许多 线程 来 运行 内核 部署 的 线程 数量 取决于 应用程序 的 输入 大小 和 硬件 特性 例如 我们 前面 展示 的 矩阵 乘法 示例 是 使用 x 线程 的 块 部署 在 gpu 上 的 这 意味着 tornadovm 从 已 编程 的 单线程 java 应用程序 中 部署 x 线程 块 如果 目标 设备 是 多核 cpu 则 tornadovm 部署 的 线程 数 与 可用 的 最大 cpu 核 数 相同 并行 设备 上 的 执行 完成后 tornadovm 将 结果 复制到 java 的 堆 以 使其 通过 字节 码 copyout 对 主机 端 可见 最后 将 控制权 返回 给 jvm 中 的 主 线程 我们 可以 查询 tornadovm 为 每个 应用程序 生成 的 字节 码 例如 下面 的 代码 片段 显示 了 使用 tornadovm 字节 码 的 调试 信息 运行 矩阵 乘法 时 的 简化 输出 我们 前面 介绍 的 矩阵 乘法 方法 接收 三个 参数 矩阵 ab 和 c 对于 每个 变量 tornadovm 执行 从 主机 到 设备 的 数据传输 copyin 然后 它 使用 launch 字节 码 运行 该 应用程序 回想 一下 第一次 执行 launch 时 tornadovm 会 调用 opencljit 编译器 其中 的 代码 针对 每个 计算 设备 进行了 专门化 和 优化 最后 tornadovm 执行 从 设备 到 主要 主机 的 复制 以 获取 结果 分析 opencl 生成 的 代码 让我们 深入研究 tornadovm 生成 的 opencl 内核 使用 tornadovm 我们 可以 使用 printkernel 标志 来 调试 和 检查 生成 的 内核 如下 所示 在 任务 计划 中 为 每个 任务 生成 一个 内核 此外 它 生成 一个 名为 的 内核 该 内核 将在 vm 引导 期间 执行 该 内核 背后 的 原因是 tornadovm 仅 分配 一个 大 缓冲区 来 充当 目标 设备 上 的 堆 为此 它 需要 一个 有效 的 指针 该 指针 将 用作 目标 设备 的 基本 地址 tornadovm 可以 在 该 目标 设备 中 执行 数据传输 s 内核 返回 此 基本 指针 第二个 内核 对应 于 我们 加速 的 java 方法 中 的 opencl 代码 以下 代码 段 显示 了 生成 的 内核 的 简化 并 带有 java 和 opencl 代码 要点 的 注释 请注意 生成 的 内核 可能会 因 目标 体系结构 而异 还要 注意 tornadovm 从 静态 单一 分配 ssa 表示 生成 openclc 代码 其中 每个 变量 只 分配 一次 这是 因为 tornadovm 是 graalir 的 扩展 它以 ssa 表示 形式 工作 hotspot 的 主流 jit 编译器 c 也是 如此 parameters globalulong ulong parameters globalulong ulong ulong ulong nddimension iifor ilt igetglobalid stdimension iifor ilt iiltltffifor ilt iiiiil long globalfloat ul long globalfloat ul fff computation fusemultipleadd ffiiiiil long illltltlllulull globalfloat ul iiiii 如何 使用 tornadovm 在 本 文中 我们 集中于 一个 简单 的 示例 即 矩阵 乘法 以 轻松 展示 tornadovm 运行时 和 jit 编译器 的 不同 部分 但是 使用 tornadovm 您不 仅可 以 使用 简单 的 数据类型 对 多个 任务 进行 编程 tornadovm 已被 用于 通过 加速 slam 同步 本地化 和 映射 应用程序 与 nvidiagpu 上 的 java 相比 每秒 可 加速 帧 该 应用程序 包含 大约 k 行 java 代码 这些 代码 可以 使用 tornadovm 加速 并且 强 调了 tornadovm 能够 生成 的 java 结构 的 复杂性 通常 tornadovm 适用于 加速 遵循 simd 单 指令 多 数据 模式 的 工作 负载 以及 管道 应用程序 令人 惊讶 的 是 该 分类 包括 了 广泛 的 应用 例如 深度 学习 机器 学习 数学 和 物理 模拟计算 摄影 计算机 视觉 金融 应用 信号 处理 和 化学 另外 开发人员 可以 在 graalvm 之上 从 或 任何 其他 语言 调用 tornadovm 正如 我 在 qconlondon 中 展示 的 用于 加速 nodejs 应用程序 tornadovm 诞 生于 学术界 目前 在 曼彻斯特 大学 正在 开发 中 但是 已经有 一些 公司 使用 tornadovm 来 加速 深度 学习 应用程序 一个 例子 是 总部 位于 伦敦 的 科技 公司 exusltd 该公司 目前 正在 改进 英国 nhs 医疗保健 系统 以 预测 患者 的 住院 再 住院 次数 这 成功地 改善 了 个 数据 集 的 训练 阶段 的 绩效 使用 tornadovm 将 倍 的 百万 患者 卢森堡 的 neurocom 是 行业 中 早期 采用 tornadovm 的 另一个 例子 该公司 正在 gpu 上 使用 tornadovm 将 自然语言 处理 中 使用 的 一些 关键 计算 加速 了 倍 和 倍 具体 而言 分别 使用 余弦 相似性 度量 算法 的 levenshtein 距离 和 层次 分类 摘要 tornadovm 是 openjdk 和 graalvm 的 插件 允许 开发人员 将 jvm 应用程序 脱机 到 异构 硬件 中 包括 多核 cpugpu 和 fpga 此外 tornadovm 在 设备 之间 执行 实时 任务 迁移 以 最大化 整个 应用程序 的 性能 本文 通过 一个 示例 探 讨了 tornadovm 的 功能 我们 探索 了 tornadovm 的 执行 方式 并 发现了 生成 的 代码 本文 仅 介绍 tornadovm 是什么 以及 它 可以 做什么 在 这篇 介绍性 文章 中 我们 无法 涵盖 许多 重要 主题 例 如对 每种 架构 的 编译器 专业化 的 描述 如何 有效 运行 以 减少 计算 量 fpga 编译 管道 和 实时 任务 迁移 您 可以 通过 以下 链接 找到 有关 这些 主题 的 更多 信息 更多 参考 tornadovm 常见 问题解答 动态 重 配置 tornadovm 用于 托管 编程 语言 致谢 tornadovm 开发 得 到了 欧盟 horizonedata 的 部分 支持 翻译 自 深度 学习 gpu 加速 