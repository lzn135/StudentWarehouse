并发 访问 的 线程 安全问题 并发 能 产生 问题 的 情况 是 两个 线程 都去 竞争 同一个 对象 才会 产生 问题 如果 你 的 静态 方法 只是 简单 的 逻辑 是 不会有 问题 的 但是 如果 你 的 线程 都是 去 修改 静态 变量 的 值 的话 应该是 会 造成 线程 问题 的 总 的 结论 java 是 线程 安全 的 即对 任何 方法 包括 静态 方法 都可以 不 考虑 线程 冲突 但有 一个 前提 就是 不能 存在 全局变量 如果 存在 全局变量 则需 要 使用 同步 机制 如下 通过 一组 对比 例子 从头 讲解 在 多线程 中 使用 静态 方法 会 发生 什么事 也就是说 多线程 访问 同一个 类 的 static 静态 方法 会 发生 什么事 是否 会 发生 线程 安全问题 dosomething 事实证明 只 要在 静态 函数 中 没有 处理 多线程 共享 数据 就不 存在着 多线程 访问 同一个 静态 方法 会 出现 资源 冲突 的 问题 下面 看 一个 例子 stringargs for intiilti newthread newstaticthread start intsumfor intiilti systemoutprint stepiisrunning sumiif sum threaderror systemexit sumissum 实际 执行 的 结果 显示 各个 线程 对 静态 方法 的 访问 是 交叉 执行 的 但是 这 并不 影响 各个 线程 静态 方法 print 中 sum 值 的 计算 也就是说 在此 过程中 没有 使用 全局变量 的 静态 方法 在 多线程 中 是 安全 的 静态 方法 是否 引起 线程 安全问题 主 要看 该 静态 方法 是否 对 全局变量 静态 变量 staticmember 进行 修改 操作 在 多线程 中 使用 同一个 静态 方法 时 每个 线程 使用 各自 的 实例 字段 instancefield 的 副本 而 共享 一个 静态 字段 staticfield 所以说 如果 该 静态 方法 不去 操作 一个 静态 成员 只 在 方法 内部 使用 实例 字段 instancefield 不会 引起 安全 性问题 但是 如果 该 静态 方法 操 作了 一个 静态 变量 则 需要 静态 方法 中 采用 互斥 访问 的 方式 进行 安全 处理 我们 来看 一下 没有 使用 互斥 访问 的话 会 产生 怎样 的 问题 catch exceptione stringargs for intiilti newthread newstaticthread start trythreadsleep 预留 足够 的 时间 让 上面 的 线程 跑 完 catch exceptione staticactioni 实际 运行 结果 显示 i 值 为 随机 的 数字 为了 实现 互斥 访问 这时 我们 需要 加入 一个 synchronized 关键字 代码 修改 如下 catch exceptione stringargs for intiilti newthread newstaticthread start trythreadsleep catch exceptione staticactioni 运行 结果 则 必然 是 加入 synchronized 关键字 的 静态 方法 称为 同步 静态 方法 在 访问 同步 静态 方法 时会 获取 该类 的 class 对象 所以 当 一个 线程 进入 同步 的 静态 方法 中 时 线程 监视器 获取 类 本身 的 对象 锁 其它 线程 不能 进入 这个 类 的 任何 静态 同步 方法 它 不像 实例 方法 因为 多个 线程 可以 同时 访问 不同 实例 同步 实例 方法 这个 其实 就是 操作系统 中 的 用 信号量 实现 进程 的 互斥 与 同步 问题 如果 涉及 在 同一个 类 中有 多个 静态 方法 中 处理 多线程 共享 数据 的话 那就 变成 用 信号量 解决 生产者 消费者 问题 也就是说 静态 方法 是 一份 临界 资源 对 静态 方法 的 访问 属于 进入 临界 区 对 静态 变量 的 修改 是 一份 临界 资源 对 静态 变量 的 修改 属于 进入 临界 区 转 载于 