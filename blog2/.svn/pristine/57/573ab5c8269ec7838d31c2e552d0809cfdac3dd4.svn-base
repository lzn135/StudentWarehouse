kotlin 协 程 实现 原理 coroutinescope 看完 不懂 你 砍 我 墙 裂 建议 收藏 今天 我们 来 聊聊 kotlin 的 协 程 coroutine 文末 有为 大家 准备 的 彩蛋 如果 你 还没有 接触 过 协 程 推荐 你 先 阅读 这篇 入门级 文章 what 你 还不 知道 kotlincoroutine 如果 你 已经 接触 过 协 程 相信你 都 有过 以下 几个 疑问 协 程 到底是 个 什么东西 协 程 的 suspend 有 什么 作用 工作 原理 是 怎样 的 协 程 中 的 一些 关键 名称 例如 与 coroutinescope 它们 之间 到底是 怎么样 的 关系 协 程 的 所谓 非 阻塞 式 挂起 与 恢复 又是 什么 协 程 的 内部 实现 原理 是 怎么样 的 接下来 的 一些 文章 试着 来 分析 一下 这些 疑问 也 欢迎 大家 一起 加入 来 讨论 协 程 是什么 这个 疑问 很简单 只要 你 不是 野 路子 接触 协 程 的 都应该 能够 知道 因为 官方 文档 中 已经 明确 给 出了 定义 下面 来看 下 官方 的 原话 也是 这篇 文章 最具 有 底气 的 一段话 协 程 是 一种 并发 设计 模式 您 可以 在 android 平 台上 使 用它 来 简化 异步 执行 的 代码 敲 黑板 划 重点 协 程 是 一种 并发 的 设计 模式 所以 并不是 一些人 所说 的 什么 线程 的 另一种 表现 虽然 协 程 的 内部 也 使用 到了 线程 但它 更大 的 作 用是 它 的 设计 思想 将 我们 传统 的 callback 回 调 方式 进行 消除 将 异步 编程 趋 近于 同步 对齐 解释 了 这么多 最后 我们 还是 直接 点来 看下 它 的 优点 轻 量 您 可以 在 单个 线程 上 运行 多 个协 程 因为 协 程 支持 挂起 不 会使 正在 运行 协 程 的 线程 阻塞 挂起 比 阻塞 节省 内存 且 支持 多个 并行 操作 内存 泄露 更少 使用 结构化 并发 机制 在 一个 作用 域 内 执行 多个 操作 内置 取消 支持 取消 功能 会 自动 通过 正在 运行 的 协 程 层次 结构 传播 jetpack 集成 许多 jetpack 库 都 包含 提供 全面 协 程 支持 的 扩展 某些 库 还 提供 自己 的 协 程 作用 域 可供 您 用于 结构化 并发 suspendsuspend 是 协 程 的 关键字 每一个 被 suspend 修饰 的 方法 都必须 在 另一个 suspend 函数 或者 coroutine 协 程 程序 中 进行 调用 第一次 看到 这个 定义 不知道 你们 是否 有疑问 反正 小憩 我 是 很 疑惑 为什么 suspend 修饰 的 方法 需要 有 这个 限制 呢 不加 为什么 就不 可以 它 的 作用 到底 是什么 当然 如果 你 有 关注 我 之前 的 文章 应该 就会 有所 了解 因为 在 重温 retrofit 源码 笑看 协 程 实现 这篇 文章 中 我 已经有 简单 的 提及 这里 涉及到 一种 机制 俗称 cps 每一个 suspend 修饰 的 方法 或者 lambda 表达式 都 会在 代码 调用 的 时候 为 其 额外 添加 continuation 类型 的 参数 get vnews newsresponse 上面 这段 代码 经过 cps 转换 之后 真正 的 面目 是 这样 的 get vnews funnewsget any 经过 转换 之后 原有 的 返回 类型 newsresponse 被 添加到 新增 的 continutation 参数 中 同时 返 回了 any 类型 这里 可能会 有所 疑问 返回 类型 都 变了 结果 不就 出错 了吗 其实 不是 any 在 kotlin 中 比较 特殊 它 可以 代表 任意 类型 当 suspend 函数 被 协 程 挂起 时 它会 返回 一个 特殊 的 标识 而 它 本质 就是 一个 any 当 协 程 不 挂起 进行 执 行时 它将 返回 执行 的 结果 或者 引发 的 异常 这样 为了 让 这两种 情况 的 返回 都 支持 所以 使 用了 kotlin 独有 的 any 类型 返回值 搞 明白 了 现在 来 说说 这个 continutation 参数 首先 来 看下 continutation 的 源码 context 是 协 程 的 上下文 它 更多 时候 是 combinedcontext 类型 类似于 协 程 的 集合 这个 后续 会 详情 说明 resumewith 是 用来 唤醒 挂起 的 协 程 前面 已经 说 过 协 程 在 执行 的 过程中 为了 防止 阻塞 使 用了 挂起 的 特性 一旦 协 程 内部 的 逻辑 执行 完毕 之后 就是 通过 该 方法来 唤起 协 程 让 它在 之前 挂起 的 位置 继续 执行 下去 所以 每一个 被 suspend 修饰 的 函数 都会 获取 上层 的 continutation 并 将其 作为 参数 传 递给 自己 既然是 从 上层 传递 过来 的 那么 continutation 是 由谁 创建 的 呢 其实 也 不难 猜到 continutation 就是 与 协 程 创建 的 时候 一起 被 创建 的 的 时候 就 已经 创 建了 continutation 对象 并且 启 动了 协 程 所以在 它 里面 进行 挂起 的 协 程 传递 的 参数 都是 这个 对象 简单 的 理解 就是 协 程 使用 resumewith 替换 传统 的 callback 每一个 协 程 程序 的 创建 都会 伴随 continutation 的 存在 同时 协 程 创建 的 时候 都会 自动 回 调 一次 continutation 的 resumewith 方法 以便 让 协 程 开始 执行 协 程 的 上下文 它 包含 用户 定义 的 一些 数据 集合 这些 数据 与 协 程 密切相关 它 类似于 map 集合 可以 通过 key 来 获取 不同 类型 的 数据 同时 的 灵活性 很强 如果 其 需要 改变 只需 使用 当前 的 来 创建 一个 新 的 即可 来 看下 的 定义 keykeyltegt relement gtr keykeyltgt 每一个 都有 它 唯一 的 一个 key 其中 的 类型 是 element 我们 可以 通过 对应 的 key 来 获取 对应 的 具体 对象 说的 有点 抽象 我们 直接 通过 例子 来 了解 varcontextjob aa logutilsd job logutilsd context 输出 aa aa coroutinename aa 与 coroutinename 都 实现 了 element 接口 如果 需要 结合 不同 的 可以 直接 通过 拼接 本质 就是 使 用了 plus 方法 this elementkey if interceptornull combinedcontext removedelement if combinedcontext combinedcontext leftelement interceptor plus 的 实现 逻辑 是 将 两个 拼接 的 封 装到 combinedcontext 中 组成 一个 拼接 链 同时 每次 都将 添加到 拼接 链 的 最 尾部 那么 combinedcontext 又是 什么 呢 keykeyltegt true 注意 看 它 的 两个 参数 我们 直接 拿上 面的 例 子来 分析 job dispatchersio job 对 应于 对应 element 如果 再 拼接 一层 coroutinename aa 就是 这样 的 coroutinename 功能 类似 与 链表 但 不同 的 是 你 能够 拿到 上一个 与 你 相连 的 整体 内容 与 之 对应 的 就是 minuskey 方法 从 集合 中 移除 对应 key 的 实例 有 了 这个 基础 我们 再看 它 的 get 方法 就很 清晰 了 先从 element 中 去取 没有 再从 之前 的 left 中 取 那么 这个 key 到底 是什么 呢 我们 来 看下 coroutinename name 很简单 它 的 key 就是 当然 这样 还 不够 需要 继续 结合 对于 的 operatorget 方法 所以 我们 再来 看下 element 的 get 方法 keykeyltegt esuppress uncheckedcast if thiskeykey thisaseelsenull 这里 使用 到了 kotlin 的 operator 操作符 重载 的 特性 那么 下面 的 代码 就是 等效 的 contextget coroutinename 所以 我们 就可以 直接 通过 类似于 map 的 方式 来 获取 整 个协 程 中 集合 中 对应 key 的 实例 本篇 文章 主要 介绍 了 suspend 的 工作 原理 与 的 内部结构 希望 对 学习 协 程 的 伙伴 们 能够 有所 帮助 敬请期待 后续 的 协 程 分析 项目 androidstartup 提供 一种 在 应用 启动时 能够 更加 简单 高效 的 方式 来 初始化 组件 优化 启动 速度 不仅 支持 的 全部 功能 还 提供 额外 的 同步 与 异步 等待 线程 控制 与 多 进程 支持 等功能 awesomegithub 基于 github 客户端 纯 练习 项目 支持 组件 化 开发 支持 账户 密码 与 认证 登陆 使用 kotlin 语言 进行 开发 项目 架构 是 基于 的 mvvm 项目 中使 用了 与 hilt 等 流行 开源 技术 fluttergithub 基于 flutter 的 跨 平台 版本 github 客户端 与 awesomegithub 相 对应 结合 详细 的 demo 来 全面 解析 android 相关 的 知识点 帮助 读者 能够 更快 的 掌握 与 理解 所 阐述 的 要点 dailyalgorithm 每日 一 算法 由浅入深 欢迎 加入 一起 共勉 kotlin 从 零 到 整 体系化 学习 为什么 要 学 kotlin 未来 大趋势 还是 真香 呢 我 个人认为 在 不 牺牲 性能 或 安全性 的 前提下 许多 的 kotlin 功 能使 代码 比 java 更加 简洁 易懂 kotlin 编 译为 字节 码 因此 其 性 能与 java 一样 好 它 具有 与 java 相同 的 编译 时 检查 还有 更多 内容 例如 内置 的 可 空性 检查 最 重要 的 是 kotlin 的 语言 功能 和 标准 库 功能 可 实现 简洁 有效 的 代码 简洁 因为 这是 提高 程序员 工作效率 的 关键因素 最初 是 组装 每行 代码 仅 给 您 提供 整个 程序 的 功能 说明 这 使得 读取 和 写入 都 变得 困难 因为 你 必须 一次 将 如此 多 的 代码 保 存在 脑海 中高级 语言 使 我们 可以 在 每 一行 代码 中 添加 更多 想法 例 如对 列表 进行 排序 在 大多数 现代 语言 中 都是 微不足道 的当 每行 代码 获得 更多 功能 时 编写 较大 的 程序 会 更 容易 但是 我们 不 想在 每行 代码 中 尽可能 多 地 包含 想法 如果 代码 过于 简洁 那么 它也 将 变得 难以 理解 正则表达式 就是 这个 问题 的 典型 例子 简而言之 我 仍然会 定期 与 之 抗争 综上 秉持着 对 kotlin 的 热爱 也 希望 更多 的 朋友 更好 的 无痛 的 上手 kotlin 特将 收录 整理 的 kotlin 从 零 到 整 学习 笔记 图 片中 压缩包 是 大量 的 kotlin 实战 案例 免费 分享 给 大家 大家 也 可以 在 我 的 主页 找到 我 在 b 站 的 android 高阶 教学 视频 更新 地址 需要 的 朋友 可以 在 评论 区 留下 您 的 邮箱地址 我 定 期会 抽空 看 评论 然后 发给 大家 如 回复 不 及时 大家 也 可以 在 我 的 主页 介绍 处 加上 我 的 微 信 备注 kt 无偿 分享 