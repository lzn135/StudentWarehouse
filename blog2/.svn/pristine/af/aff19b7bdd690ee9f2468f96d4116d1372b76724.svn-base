java 中 synchronized 实现 类 锁 的 两种 方式 及 原理 解析 简介 上 一篇 文章 java 中 synchronized 实现 对象 锁 的 两种 方式 及 原理 解析 中 介绍 了 方法 锁 的 两种 实现 方式 及 synchronized 的 底层 原理 本文 将 讲解 synchronized 的 类 锁 的 两种 实现 方式 一类 锁 的 定义 什么 是 类 锁 类 锁 指 synchronize 修饰 的 静态 方法 或 指定 锁 为 class 对象 类 锁 来自 何处 不同 的 线程 访问 使用 类 锁 的 方法 的 时候 他们 获 取到 的 锁 其实是 class 对象 因为 同一个 类 中有 且 只有 一个 class 对象 但 同一个 类 中 可以 有 很 多个 其他 对象 此时 就 出现 了 同一个 类 中 多个 对象 对 class 对象 使用 的 竞争 类 锁 则 保证 了 在 同一时间 只允许 一个 线程 访问 被 类 锁 锁住 的 方法 类 锁 有 两种 实现 方式 synchronized 加在 static 方法 上 静态 方法 锁 synchronized class 代码 块 接下来 我们 分别 来看 一下 类 锁 的 两种 实现 形式 以及 它们 之间 的 区别 二 静态 方法 锁 的 方式 实现 类 锁 我们 使用 类 锁 应该 保证 在 同一个 类 中 不同 对象 的 线程 执行 同一 方法 时 保证 多个 线程 串行 执行 此 方 法则 说明 我们 的 类 锁 生效 了 带着 这个 预期 我们 来 看下 通过 静态 方法 锁 实现 多个 线程 串行 执行 目标 方法 完整 的 代码 实例 这两个 实例 声 明为 static 是因为 要在 main 方法 中 测试 与 方法 锁 无关 关键 两个 关键字 同时 使用 线程 名 getname 运行 开始 trythreadsleep catch 线程 getname 运行 结束 method stringargs instance instance threadstart threadstart try 两个 线程 必须 都 执行 完毕 后 threadjoin threadjoin catch 两个 线程 都 已经 执行 完毕 运行 结果 线程 名 thread 运行 开始 线程 thread 运行 结束 线程 名 thread 运行 开始 线程 thread 运行 结束 两个 线程 都 已经 执行 完毕 二 静态 方法 锁 的 实现 原理 当在 静态 方法 上 使用 synchronized 关键字 修饰 时 就可 以是 想 方法 的 同步 了 但 其实 使用 类 锁 的 第二个 关键 点在 不同 实例 的 线程 调用 类 中 的 方法 时 也 就是 上述 代码 中 main 方法 中 的 两个 线程 threadthread 分别 对应 的 instance 和 instance 这个 代码 的 精髓 在于 同一个 类 中 不同 的 两个 对象 instance 和 instance 的 两个 线程 要 控制 这两个 线程 串行 执行 则需 要 使用 类 锁 那 大家 可能有 下面 的 疑问 为什么 要用 类 锁 用 对象 锁 会 怎样 为什么 要用 类 锁 用 对象 锁 会 怎样 先 解释 如果 不加 static 类 锁 会 变成 什么 如果 看过 前 一篇 文章 java 中 synchronized 实现 对象 锁 的 两种 方式 及 原理 解析 你 会 知道 synchronized 能够 保证 在 同一 时刻 最多 只有 一个 线程 执行 该段 代码 以 保证 并发 安全 但 只用 的 synchronized 修饰 的 方法 其实是 方法 锁 也 就是 对象 锁 对象 锁 的 作用 范围 仅限于 同一个 对象 内 而 上述 代码 中 我们 有 两个 不同 的 对象 instance 和 instance 所以 如果 你 把 static 关键字 去掉 则 此 同步 方法 就 成了 不同 对象 中 的 方法 锁 又 因为 方法 锁 是 对象 锁 中 的 一种 实现 形式 即 此时 instance 和 instance 分别 持 有的是 一把 对象 锁 对象 锁 的 特性 是 每个 对象 的 对象 锁 只能 锁住 自己 对象 内 的 线程 而 无法 锁住 其他 的 对象 中 的 线程 这 就是 为何 对象 锁 不能 锁住 不同 对象 中 的 线程 的 原因 这 也是 对象 锁 和 类 锁 的 区别 方法 锁 的 作用 范围 是 同一个 对象 内 的 不同 线程 而 类 锁 则 可以 控制 不同 对象 中 的 不同 线程 为什么 同步 方法 上 一 定要 加上 static 才能 实现 类 锁 同步 方法 加上 static 关键 字后 那 此 方法 在 class 创建 的 时候 就 已经 初始化 好了 类 中所 有的 实例 同步 使用 这个 方法 锁 的 作用 范围 是 最大 的 如果 不加 static 关键字 则 该 方法 会被 instance 和 instance 同时 访 问到 因为 锁 的 范围 仅仅 局限 在 instance 和 instance 对象 中 此时 是 不能实现 instance 和 instance 两个 对象 所在 的 不同 线程 之间 的 同步 三 synchronized class 代码 块 方式 实现 类 锁 类 锁 的 第二种 实现 方式 它 的 语义 是 只要 同步 代码 块 中 是 class 不管 有 多少个 对象 调用 这段 代码 都 表示 大家 共用 一个 对象 这就 实现 了 不同 的 实例 串行 的 执行 此 代码 块 完整 代码 示例 method 关键 用 class 作为 锁 对象 即使 在 不同 的 实例 中 也 能 保证 线程 安全 对比 此 形式 类 锁 与 对象 锁 中 的 同步 代码 块 锁 只有 锁 对象 不同 同步 代码 块 锁 中 的 锁 对 象是 this 而 类 锁 是 classlockclass 线程 名 getname 运行 开始 trythreadsleep catch 线程 getname 运行 结束 stringargs instance instance threadstart threadstart try 两个 线程 必须 都 执行 完毕 后 threadjoin threadjoin catch 两个 线程 都 已经 执行 完毕 运行 结果 线程 名 thread 运行 开始 线程 thread 运行 结束 线程 名 thread 运行 开始 线程 thread 运行 结束 两个 线程 都 已经 执行 完毕 可以 看出 两个 线程 依然是 串行 执行 此种 方式 和 上 一种 方式 的 结果 一致 为什么 java 的 synchronized 实现 类 锁 或 对象 锁 提供 了 两种 方式 这两种 方式 是 使用 synchronized 修饰 方法 或 使用 synchronized 代码 块 提供 两种 方式 的 原因 是因为 synchronized 关键字 的 缺陷 之一 就是 效率 低 synchronized 只 有当 同步 方法 执行 完 或 执 行时 抛出 异常 或 调用 wait 系列 方法 时 才会 释放 锁 若不 释放 锁 其他 线程 只能 等待 所以 相对 相率 比较 低做 任何事 提高 效率 的 第一性 原理 是 在 满足要求 的 情况下 尽可能 的 少 做事 所以 synchronized 关键字 除了 可以 加在 方法 上 之外 还 提供 了 同步 代码 块 可以 让 其 在 方法 内部 使用 我们 在 程序 编写 时 应该在 满足要求 的 情况下 尽可能 的 减少 synchronized 代码 块 内 的 代码 量 因为 synchronized 代码 块 内 的 代码 都是 串行 执行 的 效率 自然 不如 多个 线程 并行 处理 效率高 所以 应该 将 那些 不需要 同步 的 代码移动 到 synchronized 代码 块 外 执行 这样 的 效率 会 更高 这 就是 synchronized 为什么 提供 两种 方式 做 同步 四 总结 本文 承接 上文 java 中 synchronized 实现 对象 锁 的 两种 方式 及 原理 解析 讲解 完 对象 锁 后又 讲 解了 类 锁 java 中 的 synchronized 实现 的 对象 锁 和 类 锁 的 各种 实现 方式 已经 交代 清楚 以及 其 实现 原理 也 做了 初步 的 解析 但 这些 只是 基础 部分 接下来 的 文章 中将 重点 分析 中 不同 情况下 的 synchronized 是否 能够 保证 线程 安全 彻底 理解 synchronized 关键字 的 作用 域 这样 才能 不再 使用 同步 的 过程中 给 自己 挖坑 并且 后续 文章 中 也是 面试官 常常 问到 场景 绝对 不容 错过 喜欢 本文 请 点 赞 和 收藏 